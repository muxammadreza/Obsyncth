name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.5.7 or patch/minor/major)'
        required: true
        default: 'patch'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Update version
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
          else
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
          fi

      - name: Build plugin
        run: npm run build:ci

      - name: Validate build artifacts
        run: |
          if [ ! -f "main.js" ]; then
            echo "❌ Build failed: main.js not found"
            exit 1
          fi
          if [ ! -f "manifest.json" ]; then
            echo "❌ Build failed: manifest.json not found"
            exit 1
          fi
          if [ ! -f "styles.css" ]; then
            echo "ℹ️ styles.css not found, creating empty file"
            touch styles.css
          fi
          echo "✅ Build artifacts validated successfully"

      - name: Get version info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "${{ steps.version.outputs.tag }}${{ github.event.inputs.prerelease == 'true' && ' (Pre-release)' || '' }}"
          body: |
            🚀 **Obsyncth ${{ steps.version.outputs.tag }}**
            
            Manual release created via GitHub Actions.
            
            **Installation Methods:**
            
            **📦 Manual Installation:**
            1. Download `main.js`, `manifest.json`, and `styles.css`
            2. Create folder `VaultFolder/.obsidian/plugins/obsyncth/`
            3. Place the downloaded files in this folder
            4. Reload Obsidian and enable the plugin
            
            **🧪 BRAT Installation (Recommended):**
            1. Install the BRAT plugin in Obsidian
            2. Add this repository: `muxammadreza/Obsyncth`
            3. Enable the plugin in your settings
            
            **📱 Cross-Platform Support:**
            - ✅ Windows, macOS, Linux (automatic Syncthing management)
            - ✅ Mobile (iOS/Android) via remote Syncthing instances
            - 🐳 Docker support included
            
            **🔧 Key Features:**
            - Cross-platform vault synchronization
            - Automatic Syncthing binary download and management
            - Real-time sync status monitoring
            - Mobile-friendly remote connection support
            - Docker containerized setup option
            
            For more information, visit the [GitHub repository](https://github.com/muxammadreza/Obsyncth).
          files: |
            main.js
            manifest.json
            styles.css
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Update repository files
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add package.json manifest.json versions.json
          git commit -m "🔖 Release ${{ steps.version.outputs.tag }}" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

      - name: Success message
        run: |
          echo "🎉 Successfully created release ${{ steps.version.outputs.tag }}"
          echo "📦 BRAT-compatible assets uploaded: main.js, manifest.json, styles.css"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
